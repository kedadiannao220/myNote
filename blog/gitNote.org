#+STARTUP: showall
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: html-postamble:nil
#+LANGUAGE: zh-CN
#+OPTIONS:   ^:{}
#+TITLE: git Learn
#+TAGS: Git
#+DATE: 2016-04-01

*** GIT命令
**** git clone:
- git clone -b develop --single-branch <git-address> :从git地址当中clone 指定的develop分支/或者在git repository当中指定此项目的默认branch
**** git add：
- git add :将文件暂存，若多次修改，会暂存多个版本，但提交的快照只会保存最后一次的版本
- git add -A ：暂存所有的新增，修改，删除过的文件

**** git diff：
- git diff： 比较工作目录当中未暂存文件与暂存区快照的文件
- git diff --cached：比较已经暂存文件与上次提交的快照文件
**** git commit
- git commit -m ：提交添加注释信息
- git commit -v ：提交时将修改差异添加至commit信息当中
- git commit -a ：可以将示暂存的文件暂存后提交
- git commit --amend：撤消刚提交的操作
**** git remove
- rm file：从未暂存文件列表当中删除某文件
- git rm：添加移除文件操作的记录信息
- git rm --cached：从跟踪清单当中删除某些文件
**** git reset
- git reset HEAD file：撤销此file的add操作
- git reset --hard HEAD^：撤销最后一次的commit

**** git checkout
- git checkout -- file：取消对file的修改操作

**** git remote
- git remote：显示远程仓库名称
- git remote -v ：显示远程仓库地址
- git remote add [name] [url]：添加一个远程仓库
- git remote show [remote-name]：显示远程仓库的信息
- git remote renmae [remote-oldname] [remote-newname]：重命名remote名称
- git remote vm [remote-name]：删除remote

**** git tag
- git tag ：列出现有的标签
- git tag -l 'v1.4.2.*'：列出1.4.2.* 的所有版本标签
- git tag -a ：添加新的标签
- git tag -m ：为标签添加描述信息
- git show [version]：显示此version下的标签信息
- git tag -s [version] ：签署标签
- git tag [version]：添加一个轻量标签
- git tag -v [version]：验证已经签署过的version
- git tag -a [version] [log]：为某个log添加标签
- git push --tags ：提交git标签

**** git fetch
- git fetch [remote-name] ：从远程仓库抓取数据

**** git push
- git push [remote-name] [branch-name]：将数据推送至远程仓库当中
- git push [remote-name] [version]：推送某一标签到remote上
- git push [remote-name] --tags：推送所有标签到remote上

**** 远程操作
- git remote add [remote-name] [url] ：添加一个远程分支
- git fetch [remote-name] ：拉取远程分支
- git push [remote-name1] [remote-name2]：推送remote2到remote1上
- git checkout -b [remote-branch-name] [remote-name] ：从远程分支上面新建一个新的远程分支
- git merge [remote1]/[remote2]：将remote2 merge到remote1

**** git rebase
- git rebase master：将当前分支衍合至master上

**** git merge
- 压缩合并git merge --squash develop ：将develop分支上所有的提交merge到当前分支成一条提交，需要在当前分支上再进行commit操作
- 拣选合并git cherry-pick <commit-num>：将其他分支的commit-num所提交的代码merge到当前分支,当前分支不需要再进行commit操作
- git cherry-pick -n <commit-nums>：merge多个commit号到当前分支，需要在当前分支上再进行commit操作

**** git branch
- git branch ：查看当前仓库的所有分支列表
- git branch [branch-name]：创建一个分支（如果是一个新的git仓库，则需要修并提交后才可以创建）
- git checkout [branch-name]：切换分支
- git branch -d [branch-name]：删除分支（若分支未被merge，则会提示错误信息）
- git branch -D [branch-name]: 强制删除分支
- git branch -m [branch-name] [newBranch-name]:重命名分支
- git branch -M [branch-name] [newBranch-name]:强制重命名分支
- git branch -b [branch-name]：创建并切换分支
- git merge [branch-name]：当对应的分支合并至当前分支
- git branch --merged：查看已经被merge的分支
- git branch --no-merged：查看未被merge的分支
- git branch -a : 查看本地和远程的所有分支
- git branch --track origin/develop : 从远程的branch下载分支，并在本地创建develop
- git push --delete origin develop: 删除远程的develop分支
***** 如何重命名远程分支
- git branch --track origin devel ：从远程下载devel分支至本地（如果本地没有远程分支的代码）
- git branch -m devel develop :将devel重命名为develop
- git push origin develop: 提交develop分支至远程
- git push --delete origin devel: 删除远程分支devel


*** git概念
**** 跟踪与未跟踪
- 在git当中新增一个文件，文件状态为untracked，称为未跟踪
- 然后执行add命令后，git提示信息为changes to be committed，此时文件被跟踪了
- 在git当中修改一个文件，文件状态为modified，git提示信息为changes not staged for commit文件之前就是被跟踪的，现在也是被跟踪

*** git其他命令
- 查看git tag 日期，信息：git for-each-ref --format="%(refname:short) %(taggerdate) %(subject) %(body)" refs/tags 

*** git文章
- [[http://rogerdudler.github.io/git-guide/][The simple guide no deep shit]]
- 


*** 利用git.oschina来搭建自己的仓库
**** [[http://git.oschina.net/oschina/git-osc/wikis/%25E5%25B8%25AE%25E5%258A%25A9#ssh-keys][git.oschina生成公钥]] 


