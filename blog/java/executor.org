#+STARTUP: showall
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: html-postamble:nil
#+LANGUAGE: zh-CN
#+OPTIONS:   ^:{}
#+TITLE: Java Executor学习 
#+TAGS: Java 
#+DATE: 2016-09-04

** 结构
- Interface Executor        
   + Interface ExecutorService
   + Interface ScheduledExecutorService extedns ExecutorService
- Interface Future
- Class Executors
** 常用方法列表
*** ExecutorService
| void    | execute(Runnable commadn) | 父接口Executor的方法 |
| boolean | isShutdown()              | 判断线程是否关闭     |
| boolean | isTerminated()            | 判断线程是否结束     |
| void    | shutdown()                | 关闭线程             |
| Future  | submit                    | 提交线程             | 
   
***  Future 
| void    | get         | 得到线程执行返回的结果 |
| boolean | isDone      | 判断线程是否结束       |
| boolean | isCancelled | 判断线程是否被取消     |

***  Executors
| static ExecutorService          | newCachedThreadPool()                                             | 带缓存的线程池                           |
| static ExecutorService          | newCachedThreadPool(ThreadFactory threadFactory)                  | 线程工程创建缓存线程池                   |
| static ExecutorService          | newFixedThreadPool(int nThreads)                                  | 固定的线程池，需要传入创建的数量         |
| static ExecutorService          | newFixedThreadPool(int nThreads, ThreadFactory threadFactory)     |                                          |
| static ExecutorService          | newSingleThreadExecutor()                                         | 单例线程池                               |
| static ExecutorService          | newSingleThreadPool(ThreadFactory threadFactory)                  |                                          |
| static ScheduledExecutorService | newScheduledThreadPool(int nThreads)                              | 固定的定时任务线程池，需要传入创建的数量 |
| static ScheduledExecutorService | newScheduledThreadPool(int nThreads, ThreadFactory threadFactory) |                                          |
| static ScheduledExecutorService | newSingleThreadScheduledExecutor()                                | 单例定时任务线程池                       |
| static ScheduledExecutorService | newSingleThreadScheduledPool(ThreadFactory threadFactory)         |                                          |

** Demo
#+BEGIN_SRC java
/*先定义两个Runnable  一个发送短信、一个发送邮件*/
public class SmsSender implements Runnable {
    @Override
    public void run() {
        for (int i = 0; i < 100; i++) {
            System.out.println(System.currentTimeMillis() + ": SmsSender method has been getted");
        }
    }
}

public class MailSender implements Runnable {
    @Override
    public void run() {
        for (int i = 0; i < 100; i++) {
            System.out.println(System.currentTimeMillis() + ": MailSender has been getted");
        }
    }
}
#+END_SRC

*** 建并启动线程
#+BEGIN_SRC java
public class ExecutorTest {
    public static void main(String[] args) {

        // 创建线程
        ExecutorService exec1 = Executors.newFixedThreadPool(1);
        ExecutorService exec2 = Executors.newCachedThreadPool();
        ExecutorService exec3 = Executors.newSingleThreadExecutor();

        // 开始启动线程
        exec1.execute(new MailSender());
        exec2.execute(new SmsSender());
        exec3.execute(new SmsSender());

        // 带有返回接口的执行线程
        Future<String> future = exec3.submit(new Callable<String>() {

            @Override
            public String call() throws Exception {
                return "SmsSender call back method";
            }
        });

        try {
            System.out.println(future.get()); //获取future的返回值
            System.out.println(future.isCancelled());
            System.out.println(future.isDone());
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        }

        // 关闭线程
        exec1.shutdown();
        exec2.shutdown();
    }
}
#+END_SRC

